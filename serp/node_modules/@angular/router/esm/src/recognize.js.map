{"version":3,"file":"recognize.js","sourceRoot":"","sources":["../../../../../modules/@angular/router/src/recognize.ts"],"names":[],"mappings":"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","sourcesContent":["import {Type} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {of } from 'rxjs/observable/of';\n\nimport {Route, RouterConfig} from './config';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from './router_state';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlPathWithParams, UrlSegment, UrlTree, mapChildrenIntoArray} from './url_tree';\nimport {last, merge} from './utils/collection';\nimport {TreeNode} from './utils/tree';\n\nclass NoMatch {\n  constructor(public segment: UrlSegment = null) {}\n}\n\nexport function recognize(\n    rootComponentType: Type, config: RouterConfig, urlTree: UrlTree,\n    url: string): Observable<RouterStateSnapshot> {\n  try {\n    const children = processSegment(config, urlTree.root, {}, PRIMARY_OUTLET);\n    const root = new ActivatedRouteSnapshot(\n        [], {}, PRIMARY_OUTLET, rootComponentType, null, urlTree.root, -1);\n    const rootNode = new TreeNode<ActivatedRouteSnapshot>(root, children);\n    return of (new RouterStateSnapshot(url, rootNode, urlTree.queryParams, urlTree.fragment));\n  } catch (e) {\n    if (e instanceof NoMatch) {\n      return new Observable<RouterStateSnapshot>(\n          (obs: Observer<RouterStateSnapshot>) =>\n              obs.error(new Error(`Cannot match any routes: '${e.segment}'`)));\n    } else {\n      return new Observable<RouterStateSnapshot>(\n          (obs: Observer<RouterStateSnapshot>) => obs.error(e));\n    }\n  }\n}\n\nfunction processSegment(config: Route[], segment: UrlSegment, extraParams: Params, outlet: string):\n    TreeNode<ActivatedRouteSnapshot>[] {\n  if (segment.pathsWithParams.length === 0 && segment.hasChildren()) {\n    return processSegmentChildren(config, segment, extraParams);\n  } else {\n    return [processPathsWithParams(\n        config, segment, 0, segment.pathsWithParams, extraParams, outlet)];\n  }\n}\n\nfunction processSegmentChildren(\n    config: Route[], segment: UrlSegment, extraParams: Params): TreeNode<ActivatedRouteSnapshot>[] {\n  const children = mapChildrenIntoArray(\n      segment, (child, childOutlet) => processSegment(config, child, extraParams, childOutlet));\n  checkOutletNameUniqueness(children);\n  sortActivatedRouteSnapshots(children);\n  return children;\n}\n\nfunction sortActivatedRouteSnapshots(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  nodes.sort((a, b) => {\n    if (a.value.outlet === PRIMARY_OUTLET) return -1;\n    if (b.value.outlet === PRIMARY_OUTLET) return 1;\n    return a.value.outlet.localeCompare(b.value.outlet);\n  });\n}\n\nfunction processPathsWithParams(\n    config: Route[], segment: UrlSegment, pathIndex: number, paths: UrlPathWithParams[],\n    extraParams: Params, outlet: string): TreeNode<ActivatedRouteSnapshot> {\n  for (let r of config) {\n    try {\n      return processPathsWithParamsAgainstRoute(r, segment, pathIndex, paths, extraParams, outlet);\n    } catch (e) {\n      if (!(e instanceof NoMatch)) throw e;\n    }\n  }\n  throw new NoMatch(segment);\n}\n\nfunction processPathsWithParamsAgainstRoute(\n    route: Route, segment: UrlSegment, pathIndex: number, paths: UrlPathWithParams[],\n    parentExtraParams: Params, outlet: string): TreeNode<ActivatedRouteSnapshot> {\n  if (route.redirectTo) throw new NoMatch();\n\n  if ((route.outlet ? route.outlet : PRIMARY_OUTLET) !== outlet) throw new NoMatch();\n\n  if (route.path === '**') {\n    const params = paths.length > 0 ? last(paths).parameters : {};\n    const snapshot = new ActivatedRouteSnapshot(\n        paths, merge(parentExtraParams, params), outlet, route.component, route, segment, -1);\n    return new TreeNode<ActivatedRouteSnapshot>(snapshot, []);\n  }\n\n  const {consumedPaths, parameters, extraParams, lastChild} =\n      match(segment, route, paths, parentExtraParams);\n  const snapshot = new ActivatedRouteSnapshot(\n      consumedPaths, parameters, outlet, route.component, route, segment,\n      pathIndex + lastChild - 1);\n  const slicedPath = paths.slice(lastChild);\n  const childConfig = route.children ? route.children : [];\n\n  if (childConfig.length === 0 && slicedPath.length === 0) {\n    return new TreeNode<ActivatedRouteSnapshot>(snapshot, []);\n\n    // TODO: check that the right segment is present\n  } else if (slicedPath.length === 0 && segment.hasChildren()) {\n    const children = processSegmentChildren(childConfig, segment, extraParams);\n    return new TreeNode<ActivatedRouteSnapshot>(snapshot, children);\n\n  } else {\n    const child = processPathsWithParams(\n        childConfig, segment, pathIndex + lastChild, slicedPath, extraParams, PRIMARY_OUTLET);\n    return new TreeNode<ActivatedRouteSnapshot>(snapshot, [child]);\n  }\n}\n\nfunction match(\n    segment: UrlSegment, route: Route, paths: UrlPathWithParams[], parentExtraParams: Params) {\n  if (route.path === '') {\n    if (route.terminal && (segment.hasChildren() || paths.length > 0)) {\n      throw new NoMatch();\n    } else {\n      return {consumedPaths: [], lastChild: 0, parameters: {}, extraParams: {}};\n    }\n  }\n\n  const path = route.path;\n  const parts = path.split('/');\n  const posParameters: {[key: string]: any} = {};\n  const consumedPaths: UrlPathWithParams[] = [];\n\n  let currentIndex = 0;\n\n  for (let i = 0; i < parts.length; ++i) {\n    if (currentIndex >= paths.length) throw new NoMatch();\n    const current = paths[currentIndex];\n\n    const p = parts[i];\n    const isPosParam = p.startsWith(':');\n\n    if (!isPosParam && p !== current.path) throw new NoMatch();\n    if (isPosParam) {\n      posParameters[p.substring(1)] = current.path;\n    }\n    consumedPaths.push(current);\n    currentIndex++;\n  }\n\n  if (route.terminal && (segment.hasChildren() || currentIndex < paths.length)) {\n    throw new NoMatch();\n  }\n\n  const parameters = merge(\n      parentExtraParams, merge(posParameters, consumedPaths[consumedPaths.length - 1].parameters));\n  const extraParams = route.component ? {} : parameters;\n  return {consumedPaths, lastChild: currentIndex, parameters, extraParams};\n}\n\nfunction checkOutletNameUniqueness(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  const names: {[k: string]: ActivatedRouteSnapshot} = {};\n  nodes.forEach(n => {\n    let routeWithSameOutletName = names[n.value.outlet];\n    if (routeWithSameOutletName) {\n      const p = routeWithSameOutletName.url.map(s => s.toString()).join('/');\n      const c = n.value.url.map(s => s.toString()).join('/');\n      throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n    }\n    names[n.value.outlet] = n.value;\n  });\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}